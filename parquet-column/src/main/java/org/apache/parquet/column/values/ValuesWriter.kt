/*
 * Copyright (c) The Apache Software Foundation.
 * Copyright (c) GAHOJIN, Inc.
 *
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.parquet.column.values

import org.apache.parquet.bytes.BytesInput
import org.apache.parquet.column.Encoding
import org.apache.parquet.column.page.DictionaryPage
import org.apache.parquet.io.api.Binary

/**
 * base class to implement an encoding for a given column
 */
abstract class ValuesWriter : AutoCloseable {
    /**
     * used to decide if we want to work to the next page
     *
     * @return the size of the currently buffered data (in bytes)
     */
    abstract val bufferedSize: Long

    // TODO: maybe consolidate into a getPage
    /**
     * @return the bytes buffered so far to write to the current page
     */
    abstract val bytes: BytesInput

    /**
     * called after getBytes() and before reset()
     *
     * @return the encoding that was used to encode the bytes
     */
    abstract val encoding: Encoding

    /**
     * ( > [.getBufferedSize] )
     *
     * @return the allocated size of the buffer
     */
    abstract val allocatedSize: Long

    /**
     * called after getBytes() to reset the current buffer and start writing the next page
     */
    abstract fun reset()

    /**
     * Called to close the values writer. Any output stream is closed and can no longer be used.
     * All resources are released.
     */
    override fun close() = Unit

    /**
     * Returns the dictionary generated by this writer if one was created.
     * As part of this operation the dictionary is closed and will not have
     * any new values written into it.
     *
     * @return the dictionary page or null if not dictionary based
     */
    open fun toDictPageAndClose(): DictionaryPage? {
        return null
    }

    /**
     * reset the dictionary when a new block starts
     */
    open fun resetDictionary() {}

    /**
     * @param value the value to encode
     */
    open fun writeByte(value: Int) {
        throw UnsupportedOperationException(javaClass.getName())
    }

    /**
     * @param v the value to encode
     */
    open fun writeBoolean(v: Boolean) {
        throw UnsupportedOperationException(javaClass.getName())
    }

    /**
     * @param v the value to encode
     */
    open fun writeBytes(v: Binary) {
        throw UnsupportedOperationException(javaClass.getName())
    }

    /**
     * @param v the value to encode
     */
    open fun writeInteger(v: Int) {
        throw UnsupportedOperationException(javaClass.getName())
    }

    /**
     * @param v the value to encode
     */
    open fun writeLong(v: Long) {
        throw UnsupportedOperationException(javaClass.getName())
    }

    /**
     * @param v the value to encode
     */
    open fun writeDouble(v: Double) {
        throw UnsupportedOperationException(javaClass.getName())
    }

    /**
     * @param v the value to encode
     */
    open fun writeFloat(v: Float) {
        throw UnsupportedOperationException(javaClass.getName())
    }

    abstract fun memUsageString(prefix: String): String
}
